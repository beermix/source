diff --git a/Rules.mak b/Rules.mak
old mode 100644
new mode 100755
index 46d714ded..be542acbf
--- a/Rules.mak
+++ b/Rules.mak
@@ -70,7 +70,7 @@ STRIP_FLAGS ?= -x -R .note -R .comment
 
 # Select the compiler needed to build binaries for your development system
 HOSTCC     = gcc
-BUILD_CFLAGS = -Os
+BUILD_CFLAGS = -O2
 
 #---------------------------------------------------------
 # Nothing beyond this point should ever be touched by mere
@@ -266,10 +266,10 @@ OPTIMIZATION:=
 OPTIMIZATION-$(GCC_MAJOR_VER):=
 OPTIMIZATION-$(GCC_MAJOR_VER).$(GCC_MINOR_VER):=
 
-# Use '-Os' optimization if available, else use -O2, allow Config to override
-$(eval $(call check-gcc-var,-Os))
-ifneq ($(CFLAG_-Os),)
-OPTIMIZATION += $(CFLAG_-Os)
+# Use '-O2' optimization if available, else use -O2, allow Config to override
+$(eval $(call check-gcc-var,-O2))
+ifneq ($(CFLAG_-O2),)
+OPTIMIZATION += $(CFLAG_-O2)
 else
 $(eval $(call check-gcc-var,-O2))
 OPTIMIZATION += $(CFLAG_-O2)
@@ -346,7 +346,7 @@ ifeq ($(CONFIG_386)$(CONFIG_486)$(CONFIG_586),y)
 	# should be fixed with at least gcc-4.3.
 	# Non-SSE capable processor.
 	# NB: this may make SSE insns segfault!
-	# -O1 -march=pentium3, -Os -msse etc are known to be affected.
+	# -O1 -march=pentium3, -O2 -msse etc are known to be affected.
 	# See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=13685
 	# -m32 is needed if host is 64-bit
 	OPTIMIZATION+=$(call check_gcc,-m32 -mpreferred-stack-boundary=2,)
diff --git a/include/features.h b/include/features.h
old mode 100644
new mode 100755
index f9820791b..9b640e062
--- a/include/features.h
+++ b/include/features.h
@@ -193,7 +193,7 @@
 /* For uClibc, always optimize for size -- this should disable
  * a lot of expensive inlining...
  * TODO: this is wrong! __OPTIMIZE_SIZE__ is an indicator of
- * gcc -Os compile. We should not mess with compiler inlines.
+ * gcc -O2 compile. We should not mess with compiler inlines.
  * We should instead disable __USE_EXTERN_INLINES unconditionally,
  * or maybe actually audit and test uclibc to work correctly
  * with __USE_EXTERN_INLINES on.
@@ -424,7 +424,7 @@
 /* Decide whether we can, and are willing to define extern inline
  * functions in headers, even if this results in a slightly bigger
  * code for user programs built against uclibc.
- * Enabled only in -O2 compiles, not -Os.
+ * Enabled only in -O2 compiles, not -O2.
  * uclibc itself is usually built without __USE_EXTERN_INLINES,
  * remove "&& !defined __OPTIMIZE_SIZE__" part to do otherwise.
  */
diff --git a/ldso/ldso/Makefile.in b/ldso/ldso/Makefile.in
old mode 100644
new mode 100755
index acb1a5b2a..c853feae8
--- a/ldso/ldso/Makefile.in
+++ b/ldso/ldso/Makefile.in
@@ -27,9 +27,9 @@ CFLAGS-rtld += -DUCLIBC_RUNTIME_PREFIX=\"$(RUNTIME_PREFIX)\" -DUCLIBC_LDSO=\"$(U
 # Not really much point in including debugging info, since gdb
 # can't really debug ldso, since gdb requires help from ldso to
 # debug things....
-# On arm, gcc-4.3.x onwards -Os emits calls to libgcc, which calls _div0,
+# On arm, gcc-4.3.x onwards -O2 emits calls to libgcc, which calls _div0,
 # which tries to call raise(). And raise comes from libc so a catch 22.
-# Using -O2 instead. We could have use -fno-early-inlining with -Os too.
+# Using -O2 instead. We could have use -fno-early-inlining with -O2 too.
 CFLAGS-$(DODEBUG)-ldso/ldso := -O2 -g
 
 CFLAGS-ldso.c := -DLDSO_ELFINTERP=\"$(TARGET_ARCH)/elfinterp.c\"
diff --git a/libc/string/i386/memchr.c b/libc/string/i386/memchr.c
old mode 100644
new mode 100755
index 1960f6ba4..75ed19427
--- a/libc/string/i386/memchr.c
+++ b/libc/string/i386/memchr.c
@@ -55,7 +55,7 @@ void *memchr(const void *s, int c, size_t count)
 #ifndef memchr
 libc_hidden_def(memchr)
 #else
-/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -Os memchr.c -o memchr
+/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -O2 memchr.c -o memchr
  * and run ./memchr
  */
 int main()
diff --git a/libc/string/i386/memmove.c b/libc/string/i386/memmove.c
old mode 100644
new mode 100755
index 0ec8016a5..13663a622
--- a/libc/string/i386/memmove.c
+++ b/libc/string/i386/memmove.c
@@ -57,7 +57,7 @@ void *memmove(void *dest, const void *src, size_t n)
 #ifndef memmove
 libc_hidden_def(memmove)
 #else
-/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -Os memmove.c -o memmove
+/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -O2 memmove.c -o memmove
  * and run ./memmove
  */
 int main()
diff --git a/libc/string/i386/strchrnul.c b/libc/string/i386/strchrnul.c
old mode 100644
new mode 100755
index d48427214..5696499c9
--- a/libc/string/i386/strchrnul.c
+++ b/libc/string/i386/strchrnul.c
@@ -33,7 +33,7 @@ char *strchrnul(const char *s, int c)
 #ifndef strchrnul
 libc_hidden_def(strchrnul)
 #else
-/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -Os strchrnul.c -o strchrnul
+/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -O2 strchrnul.c -o strchrnul
  * and run ./strchrnul
  */
 int main()
diff --git a/libc/string/i386/strncat.c b/libc/string/i386/strncat.c
old mode 100644
new mode 100755
index 12f0a302b..fe79103ee
--- a/libc/string/i386/strncat.c
+++ b/libc/string/i386/strncat.c
@@ -64,7 +64,7 @@ char *strncat(char * dest, const char * src, size_t count)
 #ifndef strncat
 libc_hidden_def(strncat)
 #else
-/* Uncomment TESTING, gcc -m32 -Os strncat.c -o strncat
+/* Uncomment TESTING, gcc -m32 -O2 strncat.c -o strncat
  * and run ./strncat
  */
 int main()
diff --git a/libc/string/i386/strncpy.c b/libc/string/i386/strncpy.c
old mode 100644
new mode 100755
index 99d104b0d..00dd4b0f1
--- a/libc/string/i386/strncpy.c
+++ b/libc/string/i386/strncpy.c
@@ -55,7 +55,7 @@ char *strncpy(char * dest, const char * src, size_t count)
 #ifndef strncpy
 libc_hidden_def(strncpy)
 #else
-/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -Os strncpy.c -o strncpy
+/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -O2 strncpy.c -o strncpy
  * and run ./strncpy
  */
 int main()
diff --git a/libc/string/i386/strnlen.c b/libc/string/i386/strnlen.c
old mode 100644
new mode 100755
index f58f698d1..0ac522622
--- a/libc/string/i386/strnlen.c
+++ b/libc/string/i386/strnlen.c
@@ -56,7 +56,7 @@ size_t strnlen(const char *s, size_t count)
 #ifndef strnlen
 libc_hidden_def(strnlen)
 #else
-/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -Os strnlen.c -o strnlen
+/* Uncomment TESTING, gcc -D_GNU_SOURCE -m32 -O2 strnlen.c -o strnlen
  * and run ./strnlen
  */
 int main()
diff --git a/libc/unistd/sysconf.c b/libc/unistd/sysconf.c
old mode 100644
new mode 100755
index 172794e9c..7532cae35
--- a/libc/unistd/sysconf.c
+++ b/libc/unistd/sysconf.c
@@ -146,7 +146,7 @@ static int nprocessors_conf(void)
  * On i386, the switch-based implementation generates 796 bytes of code.
  * However, many of the return values are repeats.  By collecting these
  * repeats and moving to a table-based implementation, we generate 283
- * bytes on i386 (-Os -fomit-frame-pointer).
+ * bytes on i386 (-O2 -fomit-frame-pointer).
  */
 
 #ifdef _UCLIBC_GENERATE_SYSCONF_ARCH
diff --git a/libcrypt/md5.c b/libcrypt/md5.c
old mode 100644
new mode 100755
index 1af11ed83..3dcdbc393
--- a/libcrypt/md5.c
+++ b/libcrypt/md5.c
@@ -58,7 +58,7 @@
  *       2    no unrolling -- introduces the need to swap 4 variables (slow)
  *       3    no unrolling and all 4 loops merged into one with switch
  *               in each loop (glacial)
- * On i386, sizes are roughly (-Os -fno-builtin):
+ * On i386, sizes are roughly (-O2 -fno-builtin):
  *     0: 3k     1: 2.5k     2: 2.2k     3: 2k
  *
  *
