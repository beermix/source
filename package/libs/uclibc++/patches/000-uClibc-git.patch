diff --git a/include/iterator_base b/include/iterator_base
index 1cae589..e112a7f 100644
--- a/include/iterator_base
+++ b/include/iterator_base
@@ -139,7 +139,7 @@ namespace std{
 	public:
 		typedef Iterator iterator_type;
 
-		reverse_iterator() : current(){};
+		reverse_iterator() : current(){}
 		explicit reverse_iterator(Iterator x) : current(x) { }
 		template<class U> reverse_iterator(const reverse_iterator<U> &x) : current(x.base()){}
 
@@ -225,7 +225,7 @@ namespace std{
 		Container& container;
 	public:
 		typedef Container container_type;
-		explicit back_insert_iterator(Container& x):container(x) {};
+		explicit back_insert_iterator(Container& x):container(x) {}
 		back_insert_iterator<Container>& operator=(const typename Container::value_type& value){
 			container.push_back(value);
 			return *this;
diff --git a/include/stack b/include/stack
index d4861b3..ea697f1 100644
--- a/include/stack
+++ b/include/stack
@@ -34,7 +34,7 @@ namespace std{
 		typedef typename Container::size_type	size_type;
 		typedef Container			container_type;
 
-		explicit stack(const Container& a = Container()) : c(a) {  };
+		explicit stack(const Container& a = Container()) : c(a) {  }
 		bool empty() const { return c.empty(); }
 		size_type size() const { return c.size(); }
 		value_type&       top() { return c.back(); }

commit 0dd45c2d767f80d9f194c100a3eb5e5c5e919ec0
Author: Rosen Penev <rosenp@gmail.com>
Date:   Fri Aug 2 18:55:56 2019 -0700

    iterator: Add missing parentheses
    
    Clang warns:
    
    warning: '&&' within '||' [-Wlogical-op-parentheses]
    return sbuf == b.sbuf || is_eof() && b.is_eof();
    
    Signed-off-by: Rosen Penev <rosenp@gmail.com>
    Signed-off-by: Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

diff --git a/include/iterator b/include/iterator
index d65f467..3348d85 100644
--- a/include/iterator
+++ b/include/iterator
@@ -164,7 +164,7 @@ namespace std{
 		}
 
 		bool equal(const istreambuf_iterator& b) const{
-			return sbuf == b.sbuf || is_eof() && b.is_eof();
+			return sbuf == b.sbuf || (is_eof() && b.is_eof());
 		}
 	private:
 		streambuf_type* sbuf;

commit 3523d9461c628746f478a11e20040b6c799f18c7
Author: Rosen Penev <rosenp@gmail.com>
Date:   Fri Aug 2 18:55:57 2019 -0700

    include: Switch if to ifdef
    
    Throws -Wundef warning in modern compilers.
    
    Signed-off-by: Rosen Penev <rosenp@gmail.com>
    Signed-off-by: Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

diff --git a/include/cstdio b/include/cstdio
index 8699385..f959ff5 100644
--- a/include/cstdio
+++ b/include/cstdio
@@ -65,7 +65,7 @@ namespace std{
 	using ::sprintf;
 	using ::sscanf;
 	using ::tmpfile;
-#if _GLIBCXX_USE_TMPNAM
+#ifdef _GLIBCXX_USE_TMPNAM
 	using ::tmpnam;
 #endif
 	using ::ungetc;
diff --git a/include/new b/include/new
index 6214b11..1dc33a4 100644
--- a/include/new
+++ b/include/new
@@ -39,13 +39,13 @@ namespace std{
 
 _UCXXEXPORT void* operator new(std::size_t numBytes) _UCXX_THROW(std::bad_alloc);
 _UCXXEXPORT void operator delete(void* ptr) _UCXX_USE_NOEXCEPT;
-#if __cpp_sized_deallocation
+#ifdef __cpp_sized_deallocation
 _UCXXEXPORT void operator delete(void* ptr, std::size_t) _UCXX_USE_NOEXCEPT;
 #endif
 
 _UCXXEXPORT void* operator new[](std::size_t numBytes) _UCXX_THROW(std::bad_alloc);
 _UCXXEXPORT void operator delete[](void * ptr) _UCXX_USE_NOEXCEPT;
-#if __cpp_sized_deallocation
+#ifdef __cpp_sized_deallocation
 _UCXXEXPORT void operator delete[](void * ptr, std::size_t) _UCXX_USE_NOEXCEPT;
 #endif
 

commit c3ee60eca977032cbd4ce55b396c6e1121518f10
Author: Rosen Penev <rosenp@gmail.com>
Date:   Fri Aug 2 18:55:58 2019 -0700

    include: Replace C style casts with static_cast
    
    Found with Clang's -Wold-style-cast
    
    Signed-off-by: Rosen Penev <rosenp@gmail.com>
    Signed-off-by: Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

diff --git a/include/char_traits b/include/char_traits
index 36eae36..1d33f39 100644
--- a/include/char_traits
+++ b/include/char_traits
@@ -52,7 +52,7 @@ namespace std{
 		static char_type to_char_type(const int_type & i);
 
 		inline static int_type to_int_type(const char_type & c){
-			return (short int)(unsigned char)c;
+			return static_cast<short int>(static_cast<unsigned char>(c));
 		}
 
 		inline static bool eq_int_type(const int_type & a, const int_type & b){
@@ -71,7 +71,7 @@ namespace std{
 		}
 
 		inline static char_type* move(char_type* s1, const char_type* s2, size_t n){
-			return (char*) memmove(s1, s2, n);
+			return static_cast<char*>(memmove(s1, s2, n));
 		}
 
 		inline static char_type* copy(char_type* s1, const char_type* s2, size_t n){
@@ -82,7 +82,7 @@ namespace std{
 		}
 
 		inline static char_type* assign(char_type* s, size_t n, char_type a){
-			return (char *)memset(s, a, n);
+			return static_cast<char *>(memset(s, a, n));
 		}
 
 		inline static int compare(const char_type* s1, const char_type* s2, size_t n){
diff --git a/include/memory b/include/memory
index 9ce6559..37ac637 100644
--- a/include/memory
+++ b/include/memory
@@ -63,15 +63,15 @@ public:
 
 	//Space for n Ts
 	pointer allocate(size_type n, typename allocator<void>::const_pointer = 0){
-		return (T*)(::operator new( n * sizeof(T) ));
+		return static_cast<T*>(::operator new( n * sizeof(T) ));
 	}
 	void deallocate(pointer p, size_type){
 		::operator delete(p);
 	}
 
 	//Use placement new to engage the constructor
-	void construct(pointer p, const T& val) { new((void*)p) T(val); }
-	void destroy(pointer p){ ((T*)p)->~T(); }	//Call destructor
+	void construct(pointer p, const T& val) { new(static_cast<void*>(p)) T(val); }
+	void destroy(pointer p){ (static_cast<T*>(p))->~T(); }	//Call destructor
 
 	size_type max_size() const _UCXX_USE_NOEXCEPT;
 	template<class U> struct rebind { typedef allocator<U> other; };
diff --git a/include/string b/include/string
index a790715..8cfa8b0 100644
--- a/include/string
+++ b/include/string
@@ -70,7 +70,7 @@ public:
 	typedef typename vector<Ch, A>::reverse_iterator reverse_iterator;
 	typedef typename vector<Ch, A>::const_reverse_iterator const_reverse_iterator;
 
-	static const size_type npos = (size_type)-1;
+	static const size_type npos = static_cast<size_type>(-1);
 
 	explicit _UCXXEXPORT basic_string(const A& al = A()) : vector<Ch, A>(al){ return; }
 
diff --git a/include/vector b/include/vector
index 8310bc1..3cf64ed 100644
--- a/include/vector
+++ b/include/vector
@@ -180,7 +180,7 @@ namespace std{
 		}
 
 		_UCXXEXPORT size_type max_size() const{
-			return ((size_type)(-1)) / sizeof(T);
+			return static_cast<size_type>(-1) / sizeof(T);
 		}
 
 		void downsize(size_type sz);

commit 3791a7b3b5f6a4c806929d30671058fe105c61ef
Author: Rosen Penev <rosenp@gmail.com>
Date:   Fri Sep 27 13:35:09 2019 -0700

    cstdio: Add undef for four functions
    
    When compiling with uClibc-ng, these functions get defined as macros and
    become unavailable for std.
    
    Fixes programs that use the std versions of these functions.
    
    This matches libstdcpp behavior.
    
    Signed-off-by: Rosen Penev <rosenp@gmail.com>
    Signed-off-by: Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

diff --git a/include/cstdio b/include/cstdio
index f959ff5..0a42458 100644
--- a/include/cstdio
+++ b/include/cstdio
@@ -21,6 +21,15 @@
 #ifndef __HEADER_CSTDIO
 #define __HEADER_CSTDIO 1
 
+#undef clearerr
+#undef feof
+#undef ferror
+#undef fgetc
+#undef fputc
+#undef getc
+#undef getchar
+#undef putc
+#undef putchar
 
 namespace std{
 	using ::FILE;

commit cbaa5bd24de748ad0687bf058f2392b1215f3648
Author: Rosen Penev <rosenp@gmail.com>
Date:   Thu Oct 3 19:00:32 2019 -0700

    uClibc++: Make long long available to C++11
    
    C++11 makes long long available. It is no longer a GNU extension.
    
    Signed-off-by: Rosen Penev <rosenp@gmail.com>
    Signed-off-by: Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

diff --git a/include/istream b/include/istream
index 72a8834..2d58abd 100644
--- a/include/istream
+++ b/include/istream
@@ -72,7 +72,7 @@ namespace std{
 		basic_istream<charT,traits>& operator>>(void*& p);
 		basic_istream<charT,traits>& operator>>(basic_streambuf<char_type,traits>* sb);
 
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 		basic_istream<charT,traits>& operator>>(long long& n);
 		basic_istream<charT,traits>& operator>>(unsigned long long& n);
 #endif
@@ -455,7 +455,7 @@ namespace std{
 		return *this;
 	}
 
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 	template <class charT, class traits> _UCXXEXPORT basic_istream<charT,traits>&
 		basic_istream<charT,traits>::operator>>(long long& n)
 	{
diff --git a/include/istream_helpers b/include/istream_helpers
index d87e0c7..f2c793f 100644
--- a/include/istream_helpers
+++ b/include/istream_helpers
@@ -301,7 +301,7 @@ namespace std{
 	};
 
 
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 	template <class traits> class _UCXXEXPORT __istream_readin<traits, char, long long>{
 	public:
 		inline static void readin(basic_istream<char, traits >& stream, long long & var)
diff --git a/include/ostream b/include/ostream
index 289514c..3072589 100644
--- a/include/ostream
+++ b/include/ostream
@@ -85,7 +85,7 @@ namespace std {
 		basic_ostream<charT,traits>& operator<<(long double f);
 		basic_ostream<charT,traits>& operator<<(void* p);
 		basic_ostream<charT,traits>& operator<<(basic_streambuf<char_type,traits>* sb);
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 		basic_ostream<charT,traits>& operator<<(long long n);
 		basic_ostream<charT,traits>& operator<<(unsigned long long n);
 #endif
@@ -221,7 +221,7 @@ namespace std {
 		return *this;
 	}
 
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 	template <class charT, class traits> _UCXXEXPORT basic_ostream<charT,traits>& basic_ostream<charT, traits>::operator<<(long long n)
 	{
 		sentry s(*this);
@@ -487,7 +487,7 @@ namespace std {
 #endif
 
 
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 
 //Support for output of long long data types
 
@@ -509,7 +509,7 @@ template<class Ch, class Tr> _UCXXEXPORT basic_ostream<Ch, Tr>&
 }
 
 
-#endif	//__STRICT_ANSI__
+#endif // !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 
 
 
diff --git a/include/ostream_helpers b/include/ostream_helpers
index fa50407..f4d33f9 100644
--- a/include/ostream_helpers
+++ b/include/ostream_helpers
@@ -142,7 +142,7 @@ namespace std{
 		}
 	};
 
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 
 	template <class traits> class _UCXXEXPORT __ostream_printout<traits, char, signed long long int>{
 	public:
@@ -237,7 +237,7 @@ namespace std{
 	};
 
 
-#endif	//__STRICT_ANSI__
+#endif // !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 
 	template <class traits> class _UCXXEXPORT __ostream_printout<traits, char, double>{
 	public:
@@ -357,7 +357,7 @@ namespace std{
 		}
 	};
 
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 
 	template <class traits> class _UCXXEXPORT __ostream_printout<traits, wchar_t, signed long long int>{
 	public:
@@ -428,7 +428,7 @@ namespace std{
 	};
 
 
-#endif	//__STRICT_ANSI__
+#endif // !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 
 	template <class traits> class _UCXXEXPORT __ostream_printout<traits, wchar_t, double>{
 	public:
diff --git a/tests/sstreamtest.cpp b/tests/sstreamtest.cpp
index 36b3470..ea946a9 100644
--- a/tests/sstreamtest.cpp
+++ b/tests/sstreamtest.cpp
@@ -9,7 +9,7 @@ int main(){
 	int i;
 	std::string s;
 	char c;
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 	long long ll;
 	unsigned long long ull;
 #endif
@@ -32,7 +32,7 @@ int main(){
 
 
 
-#ifndef __STRICT_ANSI__
+#if !defined(__STRICT_ANSI__) || (__cplusplus >= 201103L)
 	a.str("678 76 54");
 	a >> ll >> ull >> s;
 	std::cout << "ll (should be 678): " << ll << std::endl;

commit 6687fc9276fa52defaf8592f2001c19b826aec93
Author: Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
Date:   Thu Jun 4 10:21:43 2020 +0200

    buildsys: shorten abi dep-file names
    
    certain crypto-layers encode required information in the
    filename hence crippling NAME_MAX from 255 down to about 143
    ascii chars.
    
    Since the dependency files of libgcc_eh and libsupc encode the full
    path to the corresponding libraries, the names of the dep files can
    get quite large. Shorten them by some (arbitrary, short) hash.
    
    Signed-off-by: Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

diff --git a/Rules.mak b/Rules.mak
index 1b5ed30..9162c64 100644
--- a/Rules.mak
+++ b/Rules.mak
@@ -50,6 +50,7 @@ RM      = rm -f
 TAR     = tar
 SED     = sed
 AWK     = awk
+MD5SUM  = md5sum
 
 ARFLAGS:= cr
 
@@ -249,6 +250,7 @@ endif
 
 list-archive-members = $(if $(1),$(shell $(AR) t $(1)))
 variablify = $(strip $(subst /,_,$(subst :,_,$(subst ;,_,$(subst |,_,$(subst >,_,$(subst <,_,$(1))))))))
+print-hash = $(strip $(if $(1),$(shell printf "%s" "$(1)" | $(MD5SUM) | $(SED) 's/[^0-9a-zA-Z]//g')))
 
 GEN_LIBS:= -lc
 ifneq ($(LIBGCC_DIR),$(UCLIBCXX_RUNTIME_LIBDIR))
diff --git a/src/abi/libgcc_eh/Makefile.in b/src/abi/libgcc_eh/Makefile.in
index 46b0017..1553b34 100644
--- a/src/abi/libgcc_eh/Makefile.in
+++ b/src/abi/libgcc_eh/Makefile.in
@@ -4,7 +4,7 @@ OBJS = $(call list-archive-members,$(LIBGCC_EH))
 libgcc_eh-$(IMPORT_LIBGCC_EH) := $(OBJS)
 
 LIBGCC_EH_VAR := $(call variablify,$(LIBGCC_EH))
-LIBGCC_EH_DEP := $(LIBGCC_EH_OUT).$(LIBGCC_EH_VAR).dep
+LIBGCC_EH_DEP := $(LIBGCC_EH_OUT).$(call print-hash,$(LIBGCC_EH_VAR)).dep
 
 ifeq ($(filter $(noconfig_targets),$(MAKECMDGOALS)),)
 -include $(LIBGCC_EH_DEP)
@@ -17,7 +17,7 @@ endif
 $(LIBGCC_EH_DEP): $(LIBGCC_EH)
 	$(Q)$(RM) $(LIBGCC_EH_OUT).*dep $(LIBGCC_EH_OUT)*.o
 	$(Q)$(if $(LIBGCC_EH),(cd $(LIBGCC_EH_OUT) && $(AR) x $(LIBGCC_EH)))
-	$(Q)echo "libgcc_eh-y := \$$(addprefix \$$(LIBGCC_EH_OUT),$(libgcc_eh-y))" > $@
+	$(Q)printf "# %s\n\n%s\n" "$(LIBGCC_EH)" "libgcc_eh-y := \$$(addprefix \$$(LIBGCC_EH_OUT),$(libgcc_eh-y))" > $@
 
 CLEAN_src/abi/libgcc_eh: ;
 DISTCLEAN_src/abi/libgcc_eh:
diff --git a/src/abi/libsupc/Makefile.in b/src/abi/libsupc/Makefile.in
index 89e0e8a..9c00df0 100644
--- a/src/abi/libsupc/Makefile.in
+++ b/src/abi/libsupc/Makefile.in
@@ -5,7 +5,7 @@ OBJS-OMIT = $(filter new_op%.o del_op%.o pure.o new_handler.o eh_alloc.o eh_glob
 libsupc-$(IMPORT_LIBSUP) := $(filter-out $(OBJS-OMIT),$(OBJS))
 
 LIBSUP_VAR := $(call variablify,$(LIBSUP))
-LIBSUP_DEP :=$(LIBSUPC_OUT).$(LIBSUP_VAR).dep
+LIBSUP_DEP := $(LIBSUPC_OUT).$(call print-hash,$(LIBSUP_VAR)).dep
 
 ifeq ($(filter $(noconfig_targets),$(MAKECMDGOALS)),)
 -include $(LIBSUP_DEP)
@@ -17,7 +17,7 @@ endif
 $(LIBSUP_DEP): $(LIBSUP) $(LIBSUPC_OUT)Makefile.in
 	$(Q)$(RM) $(LIBSUPC_OUT).*dep $(LIBSUPC_OUT)*.o
 	$(Q)$(if $(LIBSUP),(cd $(LIBSUPC_OUT) && $(AR) x $(LIBSUP) && $(RM) $(OBJS-OMIT)))
-	$(Q)echo "libsupc-y := \$$(addprefix \$$(LIBSUPC_OUT),$(libsupc-y))" > $@
+	$(Q)printf "# %s\n\n%s\n" "$(LIBSUP)" "libsupc-y := \$$(addprefix \$$(LIBSUPC_OUT),$(libsupc-y))" > $@
 
 CLEAN_src/abi/libsupc: ;
 DISTCLEAN_src/abi/libsupc:
