diff --git a/Makefile b/Makefile
index 0afb3b3..3c7607c 100644
--- a/Makefile
+++ b/Makefile
@@ -12,7 +12,7 @@ DISK_CACHE_ROOT = /var/cache/polipo
 # To compile with GCC:
 
 # CC = gcc
-CDEBUGFLAGS = -Os -g -Wall -fno-strict-aliasing
+CDEBUGFLAGS = -g -Wall -fno-strict-aliasing
 
 # To compile on a pure POSIX system:
 
@@ -67,12 +67,19 @@ SRCS = util.c event.c io.c chunk.c atom.c object.c log.c diskcache.c main.c \
        http_parse.c parse_time.c dns.c forbidden.c \
        md5import.c md5.c ftsimport.c fts_compat.c socks.c mingw.c
 
+HEADERS = atom.h auth.h chunk.h client.h config.h \
+       dirent_compat.h diskcache.h dns.h event.h \
+       forbidden.h fts_compat.h ftsimport.h http.h \
+       http_parse.h io.h local.h log.h md5.h md5import.h \
+       mingw.h object.h parse_time.h polipo.h server.h \
+       socks.h tunnel.h util.h
+
 OBJS = util.o event.o io.o chunk.o atom.o object.o log.o diskcache.o main.o \
        config.o local.o http.o client.o server.o auth.o tunnel.o \
        http_parse.o parse_time.o dns.o forbidden.o \
        md5import.o ftsimport.o socks.o mingw.o
 
-polipo$(EXE): $(OBJS)
+polipo$(EXE): $(OBJS) $(HEADERS)
 	$(CC) $(CFLAGS) $(LDFLAGS) -o polipo$(EXE) $(OBJS) $(MD5LIBS) $(LDLIBS)
 
 ftsimport.o: ftsimport.c fts_compat.c
diff --git a/chunk.c b/chunk.c
index 8dd4c47..3b4218d 100644
--- a/chunk.c
+++ b/chunk.c
@@ -60,8 +60,11 @@ initChunksCommon()
             chunkHighMark = mem / 4;
         else
             chunkHighMark = 24 * MB;
-        chunkHighMark = MIN(chunkHighMark, 24 * MB);
-        chunkHighMark = MAX(chunkHighMark, 8 * CHUNK_SIZE);
+        extern AtomPtr diskCacheRoot;
+        if (*diskCacheRoot->string) /* there's disk cache */
+          chunkHighMark = MIN(chunkHighMark, 24 * MB);
+        /* else leave it at 25% of the physical RAM */
+        chunkHighMark = MAX(chunkHighMark, 8 * CHUNK_SIZE); /* chunk.h defaults (can be overriden at compile time) 8*4K on 32-bit, 8*8K on 64 */
     }
 
     if(chunkHighMark < MB / 2)
diff --git a/client.c b/client.c
index 7de174e..1191721 100644
--- a/client.c
+++ b/client.c
@@ -230,7 +230,7 @@ httpClientFinish(HTTPConnectionPtr connection, int s)
            into the queue */
         if(connection->request) {
             if(connection->request->object != NULL)
-                httpClientNoticeRequest(connection->request, 1);
+              httpClientNoticeRequest(connection->request, 1,0);
             else
                 assert(connection->flags & CONN_READER);
         }
@@ -500,7 +500,7 @@ httpClientNoticeErrorHeaders(HTTPRequestPtr request, int code, AtomPtr message,
     request->error_code = code;
     request->error_message = message;
     request->error_headers = headers;
-    httpClientNoticeRequest(request, 0);
+    httpClientNoticeRequest(request, 0,0);
     return 1;
 }
 
@@ -557,7 +557,7 @@ httpClientNewError(HTTPConnectionPtr connection, int method, int persist,
     request->error_message = message;
 
     httpQueueRequest(connection, request);
-    httpClientNoticeRequest(request, 0);
+    httpClientNoticeRequest(request, 0,0);
     return 1;
 }
         
@@ -947,7 +947,7 @@ httpClientRequestContinue(int forbidden_code, AtomPtr url,
     request->object = object;
 
     httpClientDiscardBody(connection);
-    httpClientNoticeRequest(request, 0);
+    httpClientNoticeRequest(request, 0,0);
     return 1;
 }
 
@@ -1075,7 +1075,7 @@ httpClientDiscardHandler(int status,
 }
 
 int
-httpClientNoticeRequest(HTTPRequestPtr request, int novalidate)
+httpClientNoticeRequest(HTTPRequestPtr request, int novalidate, int recursionLevel)
 {
     HTTPConnectionPtr connection = request->connection;
     ObjectPtr object = request->object;
@@ -1208,7 +1208,7 @@ httpClientNoticeRequest(HTTPRequestPtr request, int novalidate)
         if(serveNow) {
             connection->flags |= CONN_WRITER;
             lockChunk(request->object, request->from / CHUNK_SIZE);
-            return httpServeObject(connection);
+            return httpServeObject(connection,recursionLevel+1);
         } else {
             return 1;
         }
@@ -1275,7 +1275,7 @@ static int
 httpClientNoticeRequestDelayed(TimeEventHandlerPtr event)
 {
     HTTPRequestPtr request = *(HTTPRequestPtr*)event->data;
-    httpClientNoticeRequest(request, 0);
+    httpClientNoticeRequest(request, 0,0);
     return 1;
 }
 
@@ -1502,7 +1502,7 @@ httpClientSideRequest(HTTPRequestPtr request)
         return 1;
     }
         
-    return httpClientNoticeRequest(request, 0);
+    return httpClientNoticeRequest(request, 0,0);
 }
 
 int 
@@ -1575,7 +1575,7 @@ httpClientSideHandler(int status,
 }
 
 int 
-httpServeObject(HTTPConnectionPtr connection)
+httpServeObject(HTTPConnectionPtr connection,int recursionLevel)
 {
     HTTPRequestPtr request = connection->request;
     ObjectPtr object = request->object;
@@ -1590,6 +1590,12 @@ httpServeObject(HTTPConnectionPtr connection)
 
     httpSetTimeout(connection, -1);
 
+    if (recursionLevel > 20 ) {
+      unlockChunk(object, i);
+      return httpClientRawError(connection,
+                                      500, internAtom("polipo recursionLevel guard failed."), 0);
+    }
+
     if((request->error_code && relaxTransparency <= 0) ||
        object->flags & OBJECT_INITIAL) {
         object->flags &= ~OBJECT_FAILED;
@@ -1663,7 +1669,7 @@ httpServeObject(HTTPConnectionPtr connection)
         }
         request->object = object;
         connection->flags &= ~CONN_WRITER;
-        return httpClientNoticeRequest(request, 1);
+        return httpClientNoticeRequest(request, 1,recursionLevel+1);
     }
 
     if(object->flags & OBJECT_ABORTED) {
@@ -1829,7 +1835,7 @@ static int
 httpServeObjectDelayed(TimeEventHandlerPtr event)
 {
     HTTPConnectionPtr connection = *(HTTPConnectionPtr*)event->data;
-    httpServeObject(connection);
+    httpServeObject(connection,0);
     return 1;
 }
 
diff --git a/client.h b/client.h
index f62601e..4cc4f2a 100644
--- a/client.h
+++ b/client.h
@@ -49,8 +49,8 @@ int httpClientGetHandler(int, ConditionHandlerPtr);
 int httpClientHandlerHeaders(FdEventHandlerPtr event, 
                                 StreamRequestPtr request,
                                 HTTPConnectionPtr connection);
-int httpClientNoticeRequest(HTTPRequestPtr request, int);
-int httpServeObject(HTTPConnectionPtr);
+int httpClientNoticeRequest(HTTPRequestPtr request, int,int);
+int httpServeObject(HTTPConnectionPtr,int);
 int delayedHttpServeObject(HTTPConnectionPtr connection);
 int httpServeObjectStreamHandler(int status, 
                                  FdEventHandlerPtr event,
diff --git a/event.c b/event.c
index dc580a4..0d92fe1 100644
--- a/event.c
+++ b/event.c
@@ -484,6 +484,7 @@ runTimeEventQueue()
 
     while(timeEventQueue && 
           timeval_cmp(&timeEventQueue->time, &current_time) <= 0) {
+      /* VerboseDebug("runTimeEventQueue running an item... "); */
         event = timeEventQueue;
         timeEventQueue = event->next;
         if(timeEventQueue)
@@ -493,6 +494,7 @@ runTimeEventQueue()
         done = event->handler(event);
         assert(done);
         free(event);
+      /* VerboseDebug("runTimeEventQueue done item\n"); */
     }
 }
 
@@ -632,6 +634,7 @@ eventLoop()
 
     while(1) {
     again:
+      /* VerboseDebug("Event loop\n"); */
         if(exitFlag) {
             if(exitFlag < 3)
                 reopenLog();
@@ -649,8 +652,10 @@ eventLoop()
 
         timeToSleep(&sleep_time);
         if(sleep_time.tv_sec == -1) {
+          VerboseDebug("poll 1 (%d FDs, wait=%d)... ",fdEventNum,(diskIsClean ? -1 : idleTime * 1000));
             rc = poll(poll_fds, fdEventNum, 
                       diskIsClean ? -1 : idleTime * 1000);
+          VerboseDebug("poll 1 done\n");
         } else if(timeval_cmp(&sleep_time, &current_time) <= 0) {
             runTimeEventQueue();
             continue;
@@ -663,8 +668,10 @@ eventLoop()
                 int t;
                 timeval_minus(&timeout, &sleep_time, &current_time);
                 t = timeout.tv_sec * 1000 + (timeout.tv_usec + 999) / 1000;
+                VerboseDebug("poll 2 (%d FDs, wait=%d)... ",fdEventNum,(diskIsClean ? t : MIN(idleTime * 1000, t)));
                 rc = poll(poll_fds, fdEventNum,
                           diskIsClean ? t : MIN(idleTime * 1000, t));
+                VerboseDebug("poll 2 done\n");
             }
         }
 
@@ -687,6 +694,7 @@ eventLoop()
         }
 
         if(rc == 0) {
+          /* VerboseDebug("rc==0\n"); */
             if(!diskIsClean) {
                 timeToSleep(&sleep_time);
                 if(timeval_cmp(&sleep_time, &current_time) > 0)
@@ -711,7 +719,9 @@ eventLoop()
                 event = findEvent(poll_fds[j].revents, fdEvents[j]);
                 if(!event)
                     continue;
+                /* VerboseDebug("handler... "); */
                 done = event->handler(0, event);
+                /* VerboseDebug("handler done\n"); */
                 if(done) {
                     if(fds_invalid)
                         unregisterFdEvent(event);
diff --git a/main.c b/main.c
index 7b7d8e7..b7bdfb2 100644
--- a/main.c
+++ b/main.c
@@ -47,6 +47,8 @@ main(int argc, char **argv)
     int rc;
     int expire = 0, printConfig = 0;
 
+    /* VerboseDebug("polipo starting main()\n"); */
+
     initAtoms();
     CONFIG_VARIABLE(daemonise, CONFIG_BOOLEAN, "Run as a daemon");
     CONFIG_VARIABLE(pidFile, CONFIG_ATOM, "File with pid of running daemon.");
@@ -165,7 +167,9 @@ main(int argc, char **argv)
         exit(1);
     }
 
+    VerboseDebug("polipo entering eventLoop\n");
     eventLoop();
+    VerboseDebug("polipo left eventLoop\n");
 
     if(pidFile) unlink(pidFile->string);
     return 0;
diff --git a/object.c b/object.c
index ec9835a..28cc7da 100644
--- a/object.c
+++ b/object.c
@@ -84,6 +84,11 @@ void
 initObject()
 {
     int q;
+    if(objectHighMark == 0) {
+      extern int chunkHighMark;
+      objectHighMark = chunkHighMark / 12288; /* 2048 for every 24M in chunkHighMark */
+      if (objectHighMark < 2048) objectHighMark = 2048;
+    }
     if(objectHighMark < 16) {
         objectHighMark = 16;
         do_log(L_WARN, "Impossibly low objectHighMark -- setting to %d.\n",
@@ -129,9 +134,14 @@ findObject(int type, const void *key, int key_size)
     int h;
     ObjectPtr object;
 
-    if(key_size >= 50000)
+    if(key == NULL || key_size >= 50000)
         return NULL;
 
+    /* The following line will segfault if key is a dangling
+       pointer or key_size is incorrect.  recursionLevel
+       check added to client.c because gdb notices thousands
+       of mutual calls between httpServeObject and
+       httpClientNoticeRequest when this happens. */
     h = hash(type, key, key_size, log2ObjectHashTableSize);
     object = objectHashTable[h];
     if(!object)
@@ -659,7 +669,11 @@ destroyObject(ObjectPtr object)
         if(object->etag) free(object->etag);
         if(object->via) releaseAtom(object->via);
         for(i = 0; i < object->numchunks; i++) {
-            assert(!object->chunks[i].locked);
+            if (object->chunks[i].locked) {
+              /* This is bad news.  How did we end up with a
+                 reference count of 0 when we're locked ? */
+              do_log(L_ERROR, "Object still locked when no references left: forgotten unlockChunk?\n");
+            }
             if(object->chunks[i].data)
                 dispose_chunk(object->chunks[i].data);
             object->chunks[i].data = NULL;
diff --git a/polipo.h b/polipo.h
index 69d58c9..93698d5 100644
--- a/polipo.h
+++ b/polipo.h
@@ -21,6 +21,13 @@ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
 
+// #define DEBUG 1
+#if DEBUG
+#define VerboseDebug(...) fprintf (stderr, "DEBUG: " __VA_ARGS__)
+#else
+#define VerboseDebug(...) (void)0
+#endif
+
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
 #endif
diff --git a/server.c b/server.c
index 5a060f9..98fa23e 100644
--- a/server.c
+++ b/server.c
@@ -112,12 +112,17 @@ discardServer(HTTPServerPtr server)
     HTTPServerPtr previous;
     assert(!server->request);
 
-    if(server == servers)
+    if(server == servers) {
+        VerboseDebug("discardServer head\n");
         servers = server->next;
-    else {
+    } else {
+        int count = 1;
         previous = servers;
-        while(previous->next != server)
+        while(previous->next != server) {
             previous = previous->next;
+            count++;
+        }
+        VerboseDebug("discardServer head+%d\n",count);
         previous->next = server->next;
     }
 
@@ -135,11 +140,16 @@ static int
 httpServerIdle(HTTPServerPtr server)
 {
     int i;
-    if(server->request) 
+    if(server->request) {
+      VerboseDebug("httpServerIdle=0 as it has requests\n");
         return 0;
+    }
     for(i = 0; i < server->maxslots; i++)
-        if(server->connection[i])
+        if(server->connection[i]) {
+          VerboseDebug("httpServerIdle=0 as it has connection in slot %d\n",i);
             return 0;
+        }
+    VerboseDebug("httpServerIdle=1\n");
     return 1;
 }
 
@@ -149,6 +159,7 @@ expireServersHandler(TimeEventHandlerPtr event)
     HTTPServerPtr server, next;
     TimeEventHandlerPtr e;
     server = servers;
+    VerboseDebug("expireServersHandler starting\n");
     while(server) {
         next = server->next;
         if(httpServerIdle(server) &&
@@ -156,6 +167,7 @@ expireServersHandler(TimeEventHandlerPtr event)
             discardServer(server);
         server = next;
     }
+    VerboseDebug("expireServersHandler finished\n");
     e = scheduleTimeEvent(serverExpireTime / 60 + 60, 
                           expireServersHandler, 0, NULL);
     if(!e) {
@@ -253,25 +265,30 @@ static HTTPServerPtr
 getServer(char *name, int port, int proxy)
 {
     HTTPServerPtr server;
-    int i;
+    int i=0;
 
     server = servers;
     while(server) {
         if(strcmp(server->name, name) == 0 && server->port == port &&
            server->isProxy == proxy) {
-            if(httpServerIdle(server) &&
+            int is_idle = httpServerIdle(server);
+            VerboseDebug("getServer(%s,%d,%d) matches server %d, idle=%d\n",name,port,proxy,i,is_idle);
+            if(is_idle &&
                server->time +  serverExpireTime < current_time.tv_sec) {
+                VerboseDebug("... expiring it\n");
                 discardServer(server);
                 server = NULL;
                 break;
             } else {
                 server->time = current_time.tv_sec;
+                VerboseDebug("... returning it\n");
                 return server;
             }
         }
-        server = server->next;
+        server = server->next; i++;
     }
-    
+
+    VerboseDebug("getServer(%s,%d,%d) allocating new server\n",name,port,proxy);
     server = malloc(sizeof(HTTPServerRec));
     if(server == NULL) {
         do_log(L_ERROR, "Couldn't allocate server.\n");
@@ -331,9 +348,11 @@ httpServerQueueRequest(HTTPServerPtr server, HTTPRequestPtr request)
     assert(request->request && request->request->request == request);
     assert(request->connection == NULL);
     if(server->request) {
+        VerboseDebug("httpServerQueueRequest: adding to end of queue\n");
         server->request_last->next = request;
         server->request_last = request;
     } else {
+        VerboseDebug("httpServerQueueRequest: setting as only queue item\n");
         server->request_last = request;
         server->request = request;
     }
@@ -345,6 +364,7 @@ httpServerAbort(HTTPConnectionPtr connection, int fail,
                 int code, AtomPtr message)
 {
     HTTPRequestPtr request = connection->request;
+    VerboseDebug("httpServerAbort\n");
     if(request) {
         if(request->request) {
             httpClientError(request->request, code, retainAtom(message));
@@ -365,6 +385,7 @@ void
 httpServerAbortRequest(HTTPRequestPtr request, int fail,
                        int code, AtomPtr message)
 {
+  VerboseDebug("httpServerAbortRequest\n");
     if(request->connection && request == request->connection->request) {
         httpServerAbort(request->connection, fail, code, message);
     } else {
@@ -387,6 +408,7 @@ httpServerAbortRequest(HTTPRequestPtr request, int fail,
 void 
 httpServerClientReset(HTTPRequestPtr request)
 {
+  VerboseDebug("httpServerClientReset\n");
     if(request->connection && 
        request->connection->fd >= 0 &&
        !request->connection->connecting &&
@@ -402,6 +424,7 @@ httpMakeServerRequest(char *name, int port, ObjectPtr object,
     HTTPServerPtr server;
     HTTPRequestPtr request;
     int rc;
+    VerboseDebug("httpMakeServerRequest(%s,%d)\n",name,port);
 
     assert(!(object->flags & OBJECT_INPROGRESS));
 
@@ -504,6 +527,7 @@ httpServerConnection(HTTPServerPtr server)
 
     for(i = 0; i < server->numslots; i++) {
         if(!server->connection[i]) {
+            VerboseDebug("httpServerConnection using slot %d\n",i);
             server->connection[i] = connection;
             break;
         }
@@ -533,6 +557,7 @@ int
 httpServerConnectionDnsHandler(int status, GethostbynameRequestPtr request)
 {
     HTTPConnectionPtr connection = request->data;
+    VerboseDebug("httpServerConnectionDnsHandler\n");
 
     httpSetTimeout(connection, -1);
 
@@ -591,7 +616,7 @@ httpServerConnectionHandler(int status,
                             ConnectRequestPtr request)
 {
     HTTPConnectionPtr connection = request->data;
-
+    VerboseDebug("httpServerConnectionHandler\n");
     assert(connection->fd < 0);
     if(request->fd >= 0) {
         int rc;
@@ -609,7 +634,7 @@ int
 httpServerSocksHandler(int status, SocksRequestPtr request)
 {
     HTTPConnectionPtr connection = request->data;
-
+    VerboseDebug("httpServerSocksHandler\n");
     assert(connection->fd < 0);
     if(request->fd >= 0) {
         connection->fd = request->fd;
@@ -621,6 +646,7 @@ httpServerSocksHandler(int status, SocksRequestPtr request)
 int
 httpServerConnectionHandlerCommon(int status, HTTPConnectionPtr connection)
 {
+  VerboseDebug("httpServerConnectionHandlerCommon\n");
     httpSetTimeout(connection, -1);
 
     if(status < 0) {
@@ -653,6 +679,7 @@ httpServerConnectionHandlerCommon(int status, HTTPConnectionPtr connection)
 int
 httpServerIdleHandler(int a, FdEventHandlerPtr event)
 {
+  VerboseDebug("httpServerIdleHandler\n");
     HTTPConnectionPtr connection = *(HTTPConnectionPtr*)event->data;
     HTTPServerPtr server = connection->server;
     int i;
@@ -678,6 +705,7 @@ httpServerIdleHandler(int a, FdEventHandlerPtr event)
 static void
 httpServerDiscardRequests(HTTPServerPtr server)
 {
+  VerboseDebug("httpServerDiscardRequests\n");
     HTTPRequestPtr request;
     while(server->request && !server->request->request) {
         request = server->request;
@@ -739,9 +767,13 @@ httpServerGetConnection(HTTPServerPtr server, int *idle_return)
     for(i = 0; i < server->numslots; i++) {
         if(server->connection[i]) {
             if(!server->connection[i]->connecting) {
+                VerboseDebug("httpServerGetConnection: slot %d has connection that's not connecting\n",i);
                 if(!server->connection[i]->request) {
-                    if(server->idleHandler[i])
+                    VerboseDebug("... it's idle (no requests), good candidate\n");
+                    if(server->idleHandler[i]) {
+                        VerboseDebug("... unregistering idle handler %d\n",i);
                         unregisterFdEvent(server->idleHandler[i]);
+                    }
                     server->idleHandler[i] = NULL;
                     if(j < 0) j = i;
                     idle++;
@@ -754,6 +786,7 @@ httpServerGetConnection(HTTPServerPtr server, int *idle_return)
 
     if(j >= 0) {
         *idle_return = idle;
+        VerboseDebug("Returning first good candidate: %d\n",j);
         return server->connection[j];
     }
 
@@ -762,22 +795,28 @@ httpServerGetConnection(HTTPServerPtr server, int *idle_return)
         /* Don't open a connection if there are already enough in
            progress, except if the server doesn't do persistent
            connections and there's only one in progress. */
+        VerboseDebug("httpServerGetConnection: Considering additional connection on empty slot (connecting=%d server->persistent=%d)\n",connecting,server->persistent);
         if((connecting == 0 || (server->persistent <= 0 && connecting <= 1)) ||
            connecting < numRequests(server)) {
+            VerboseDebug("... OK, calling httpServerConnection\n");
             httpServerConnection(server);
-        }
-    }
+        } else VerboseDebug("... no, not doing it\n");
+    } else VerboseDebug("httpServerGetConnection: No empty slots (all %d full, change serverSlots and serverMaxSlots if that's a problem)\n",server->numslots);
 
     /* Find a connection that can accept additional requests */
     if(server->version == HTTP_11 && server->pipeline >= 4) {
         for(i = 0; i < serverSlots; i++) {
             if(server->connection[i] && !server->connection[i]->connecting &&
                pipelineIsSmall(server->connection[i])) {
-                if(server->idleHandler[i])
-                    unregisterFdEvent(server->idleHandler[i]);
-                server->idleHandler[i] = NULL;
-                *idle_return = 0;
-                return server->connection[i];
+              VerboseDebug("HTTP_11: pipelineIsSmall on slot %d (if this is a problem, try pipelineAdditionalRequests=0)\n",i);
+              if(server->idleHandler[i]) {
+                VerboseDebug("... unregistering its idle handler\n");
+                unregisterFdEvent(server->idleHandler[i]);
+              }
+              server->idleHandler[i] = NULL;
+              *idle_return = 0;
+              VerboseDebug("... returning it\n");
+              return server->connection[i];
             }
         }
     }
@@ -791,6 +830,7 @@ httpServerTrigger(HTTPServerPtr server)
     HTTPConnectionPtr connection;
     HTTPRequestPtr request;
     int idle, n, i, rc, numidle;
+    VerboseDebug("httpServerTrigger\n");
 
     while(server->request) {
         httpServerDiscardRequests(server);
@@ -914,6 +954,7 @@ httpServerSideRequest(HTTPServerPtr server)
     HTTPRequestPtr requestor = request->request;
     HTTPConnectionPtr client = requestor->connection;
     int rc, i, freeslots, idle, connecting;
+    VerboseDebug("httpServerSideRequest\n");
 
     assert(REQUEST_SIDE(request));
 
@@ -984,6 +1025,7 @@ httpServerDoSide(HTTPConnectionPtr connection)
     HTTPRequestPtr request = connection->request;
     HTTPRequestPtr requestor = request->request;
     HTTPConnectionPtr client = requestor->connection;
+    VerboseDebug("httpServerDoSide\n");
     int len = MIN(client->reqlen - client->reqbegin,
                   connection->bodylen - connection->reqoffset);
     int doflush = 
@@ -1169,6 +1211,7 @@ httpServerFinish(HTTPConnectionPtr connection, int s, int offset)
     HTTPServerPtr server = connection->server;
     HTTPRequestPtr request = connection->request;
     int i;
+    VerboseDebug("httpServerFinish\n");
 
     if(request) {
         assert(connection->pipelined >= 1);
@@ -1371,6 +1414,7 @@ void
 httpServerReply(HTTPConnectionPtr connection, int immediate)
 {
     assert(connection->pipelined > 0);
+    VerboseDebug("httpServerReply\n");
 
     if(connection->request->request == NULL) {
         do_log(L_WARN, "Aborting pipeline on %s:%d.\n",
@@ -1470,6 +1514,7 @@ httpServerRequest(ObjectPtr object, int method, int from, int to,
     char name[132];
     int port;
     int x, y, z;
+    VerboseDebug("httpServerRequest(%s)\n",scrub(object->key));
 
     assert(from >= 0 && (to < 0 || to > from));
     assert(closure == NULL);
@@ -1524,6 +1569,7 @@ int
 httpWriteRequest(HTTPConnectionPtr connection, HTTPRequestPtr request,
                  int bodylen)
 {
+  VerboseDebug("httpWriteRequest\n");
     ObjectPtr object = request->object;
     int from = request->from, to = request->to, method = request->method;
     char *url = object->key, *m;
@@ -1723,7 +1769,7 @@ httpServerHandler(int status,
                   StreamRequestPtr srequest)
 {
     HTTPConnectionPtr connection = srequest->data;
-
+    VerboseDebug("httpServerHandler\n");
     assert(connection->request->object->flags & OBJECT_INPROGRESS);
 
     if(connection->reqlen == 0) {
@@ -1764,7 +1810,7 @@ int
 httpServerSendRequest(HTTPConnectionPtr connection)
 {
     assert(connection->server);
-
+    VerboseDebug("httpServerSendRequest\n");
     if(connection->reqlen == 0) {
         do_log(D_SERVER_REQ, 
                "Writing aborted on 0x%lx\n", (unsigned long)connection);
@@ -1786,6 +1832,7 @@ httpServerReplyHandler(int status,
                        FdEventHandlerPtr event, 
                        StreamRequestPtr srequest)
 {
+  VerboseDebug("httpServerReplyHandler\n");
     HTTPConnectionPtr connection = srequest->data;
     HTTPRequestPtr request = connection->request;
     int i, body;
@@ -1863,6 +1910,7 @@ httpServerHandlerHeaders(int eof,
                          StreamRequestPtr srequest, 
                          HTTPConnectionPtr connection)
 {
+  VerboseDebug("httpServerHandlerHeaders\n");
     HTTPRequestPtr request = connection->request;
     ObjectPtr object = request->object;
     int rc;
@@ -2397,6 +2445,7 @@ httpServerHandlerHeaders(int eof,
 int
 httpServerIndirectHandlerCommon(HTTPConnectionPtr connection, int eof)
 {
+  VerboseDebug("httpServerIndirectHandlerCommon\n");
     HTTPRequestPtr request = connection->request;
 
     assert(eof >= 0);
@@ -2484,6 +2533,7 @@ httpServerIndirectHandler(int status,
 int
 httpServerReadData(HTTPConnectionPtr connection, int immediate)
 {
+  VerboseDebug("httpServerReadData\n");
     HTTPRequestPtr request = connection->request;
     ObjectPtr object = request->object;
     int to = -1;
@@ -2595,6 +2645,7 @@ httpServerDirectHandlerCommon(int kind, int status,
                               FdEventHandlerPtr event, 
                               StreamRequestPtr srequest)
 {
+  VerboseDebug("httpServerDirectHandlerCommon\n");
     HTTPConnectionPtr connection = srequest->data;
     HTTPRequestPtr request = connection->request;
     ObjectPtr object = request->object;
@@ -2796,6 +2847,8 @@ connectionAddData(HTTPConnectionPtr connection, int skip)
     }
 }
 
+/* Output for http://localhost:8123/polipo/servers?
+   if disableServersList=no (see local.c) */
 void
 listServers(FILE *out)
 {
